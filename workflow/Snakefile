import pandas as pd
import os
import re

from snakemake.utils import min_version

# Set minimum Snakemake version
min_version('7.0')

# Set some predetermined values
configfile:
    'config/config.yaml'

SAMPLES = pd.read_table(config['samples'],dtype={'SampleID':str,'Analysis':int,'FqR1':str,'FqR2':str}, comment='#', header=0).set_index(['SampleID'], drop=False)
SAMPLES = SAMPLES[SAMPLES['Analysis'] == 1]

SAMPLES.rename(columns={'SampleID': 'sample', 'FqR1': 'fq1', 'FqR2': 'fq2'}, inplace=True)
SAMPLES['pe_or_se'] = SAMPLES['fq2'].apply(lambda x: 'pe' if not pd.isnull(x) else'se')
print('SAMPLES:\n', SAMPLES)

BISCUIT_INDEX_FORMATS = ['bis.ann', 'bis.amb', 'par.bwt', 'dau.bwt', 'bis.pac', 'par.sa', 'dau.sa', 'fai']

wildcard_constraints:
    sample="|".join(SAMPLES.index),

def is_single_end(sample):
    """Return True if sample-unit is single end."""
    return pd.isna(SAMPLES.loc[sample, "fq2"])


def set_output_directory():
    if config['output_directory'] == '':
        return os.getcwd()
    else:
        return config['output_directory']
output_directory = set_output_directory()

# Create a tag to use in output files based on the bin size 
# Taken from the multiscale_methylation snakemake workflow
def create_tag(step):
    if step < 1000: # Just bp
        return f'{step}bp'
    elif step < 1000000: # kilobases
        return f'{int(step/1000)}kb'
    else: # Anything bigger will be defined as megabases
        return f'{int(step/1000000)}Mb'

bin_tags = list(map(create_tag, config["binned_averages"]["bin_sizes"]))

def get_qc_file():
    output_array = []
    for samples in SAMPLES.itertuples():
        if not is_single_end(samples.sample):
            # paired-end sample
            output_array.extend([f'{output_directory}/analysis/raw_fastqc/{samples.sample}_R{read}_fastqc.{ext}' for read in [1,2] for ext in ['html','zip']])
        else:
            # single-end sample
            output_array.extend([f'{output_directory}/analysis/raw_fastqc/{samples.sample}_fastqc.{ext}' for ext in ['html','zip']])
    print('OUTPUT QC ARRAY:\n', output_array)
    return output_array
            
def get_trim_file():
    output_array = []
    for samples in SAMPLES.itertuples():
        if not is_single_end(samples.sample):
            # paired-end sample
            output_array.extend([f'{output_directory}/analysis/trim_reads/{samples.sample}_val_{read}.fq.gz' for read in [1,2]])
        else:
            # single-end sample
            output_array.append(f'{output_directory}/analysis/trim_reads/{samples.sample}_trimmed.fq.gz')
    print('OUTPUT TRIM ARRAY:\n', output_array)
    return output_array

rule all:
    input:
        ## Preprocessing files
        # Include lambda phage and pUC19 references in supplied reference
        expand(
            'merged_reference/merged.fa.gz.{ext}',
            ext=BISCUIT_INDEX_FORMATS
        ) if config['build_ref_with_methylation_controls'] else [],

        get_qc_file(),

        # Rename FASTQs and run FastQC run over them
#        expand(
#            f'{output_directory}/analysis/raw_fastqc/{{samples.sample}}_R{{read}}_fastqc.{{ext}}',
#            ext=['html','zip'], read=[1,2], samples=SAMPLES.itertuples()
#        ),
        # fastq_screen
        expand(
            f'{output_directory}/analysis/fastq_screen/{{samples.sample}}_R{{read}}_screen.html',
            read=[1,2], samples=SAMPLES.itertuples()
        ) if config['fastq_screen']['run'] else [],

        # Create asset files
        expand(
            f'assets/{config["create_assets"]["genome"]}/{{type}}_bismap.bed.gz',
            type=['cpg', 'cgi', 'exon', 'genic', 'intergenic', 'rmsk']
        ) if config['create_assets']['run'] else [],
        expand(f'assets/{config["create_assets"]["genome"]}/{{ctxt}}_{{ncpgs}}_neighbors.bed.gz',
            ctxt=['scgs', 'scgw', 'wcgw'],
            ncpgs=['0', '1', '2', '3p']
        ) if config['create_assets']['run'] else [],

        ## Run BISCUIT
        # biscuit align
        expand(
            f'{output_directory}/analysis/align/{{samples.sample}}.sorted.markdup.bam',
            samples=SAMPLES.itertuples()
        ),
        # biscuit mergecg
        expand(
            f'{output_directory}/analysis/pileup/{{samples.sample}}_mergecg.bed.gz',
            samples=SAMPLES.itertuples()
        ),
        # bigwigs
        expand(
            f'{output_directory}/analysis/beta_bigwigs/{{samples.sample}}_{{cx}}.bw',
            samples=SAMPLES.itertuples(), cx=config['make_bigwigs']['contexts']
        ) if config['make_bigwigs']['run'] else [],
        # biscuit vcf2bed -t snp
        expand(
            f'{output_directory}/analysis/snps/{{samples.sample}}.snp.bed.gz',
            samples=SAMPLES.itertuples()
        ) if config['biscuit']['extract_snps'] or config['biscuit']['make_epibeds'] else [],
        # biscuit epiread
        expand(
            f'{output_directory}/analysis/epiread/{{samples.sample}}.epibed.gz',
            samples=SAMPLES.itertuples()
        ) if config['biscuit']['make_epibeds'] else [],

        ## Do post-processing QC
        # MultiQC
        f'{output_directory}/analysis/multiqc/multiqc_report.html',

        # Percent of genome covered
        f'{output_directory}/analysis/percent_genome_covered.pdf' if config['percent_covered']['run'] else [],

        ## Run any other QC steps
        # Observed / Expected coverage
        expand(
            f'{output_directory}/analysis/obs_exp/obs_exp_{{type}}.pdf',
            type=['cpgs', 'cgis', 'exon', 'gene', 'intr', 'rmsk']
        ) if config['obs_exp']['run'] else [],

        # CpG coverage stats
        expand(
            f'{output_directory}/analysis/cpg_stats/feature_{{type}}.pdf',
            type=['all_cpgs', 'cpg_islands', 'exon_cpgs', 'gene_cpgs', 'repeat_cpgs']
        ) if config['cpg_stats']['run'] else [],
        f'{output_directory}/analysis/cpg_stats/cgi_stats.pdf' if config['cpg_stats']['run'] else [],

        # Coverage uniformity
        expand(
            f'{output_directory}/analysis/covg_uniformity/{{samples.sample}}.10kb_binned_coverage.bed.gz',
            samples=SAMPLES.itertuples()
        ) if config['covg_uniformity']['run'] else [],
        f'{output_directory}/analysis/covg_uniformity/binned_genome_coverage.pdf' if config['covg_uniformity']['run'] else [],
        f'{output_directory}/analysis/covg_uniformity/coverage_uniformity.pdf' if config['covg_uniformity']['run'] else [],
        f'{output_directory}/analysis/covg_uniformity/sample_data.tsv' if config['covg_uniformity']['run'] else [],

        # Control vectors
        expand(
            f'{output_directory}/analysis/qc_vectors/lambda/{{samples.sample}}.bed',
            samples=SAMPLES.itertuples()
        ) if config['control_vectors'] else [],
        expand(
            f'{output_directory}/analysis/qc_vectors/puc19/{{samples.sample}}.bed',
            samples=SAMPLES.itertuples()
        ) if config['control_vectors'] else [],
        f'{output_directory}/analysis/qc_vectors/control_vector_boxplot.pdf' if config['control_vectors'] else [],
        
        # binned_averages
        expand(
            f'{output_directory}/analysis/binned_averages/{{samples.sample}}_{{BIN_TAGS}}.bed.gz',
            samples=SAMPLES.itertuples(), BIN_TAGS = bin_tags,
        ) if config['binned_averages']['run'] else [],
        
        # region_centered_bin_averages
        expand(
            f'{output_directory}/analysis/region_centered_bin_averages/{{samples.sample}}.bed',
            samples=SAMPLES.itertuples(),
        ) if config['region_centered_bin_averages']['run'] else [],
        
# Rules for preprocessing files
include:
    'rules/preprocessing.smk'

# Rules for running BISCUIT related commands
include:
    'rules/biscuit.smk'

# Rules for various QC metrics
include:
    'rules/qc.smk'

# Rules for other QC things
include:
    'rules/obs_exp.smk'
include:
    'rules/cpg_stats.smk'
include:
    'rules/covg_uniformity.smk'

# Rules for creating assets
include:
    'rules/create_assets.smk'

# Rules for creating binned averages
include:
    'rules/binned_average.smk'

# Rules for creating region-centered bin averages
include:
    'rules/region_centered_bin_averages.smk'

#ruleorder: raw_fastqc_se > raw_fastqc
#ruleorder:trim_reads > trim_reads_se
#ruleorder:fastq_screen > fastq_screen_se
